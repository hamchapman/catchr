DATABASE_URL: postgres://journalbits:ZnlyNjd1ODNubTRYWVI4WUFZSGpGNWhReURKSVIvYkVROVY4ZTkrWExjYz0K@172.17.0.17:5432/journalbits_production




uri = URI("https://www.instapaper.com/api/1/bookmarks/list")
req = Net::HTTP::Post.new uri
req.add_field "Authorization", "oauth_token=8e927b1c551345fda4236bfc56dc5376,oauth_token_secret=e638545282854e62ac80e111ea25f585"
req.add_field "Content-Type", "application/json"
response = Net::HTTP.start(uri.hostname, uri.port, :use_ssl => true) do |http|
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  http.ssl_version = :SSLv3
  http.request(req)
end
JSON.parse(response.body)



uri = URI("https://www.instapaper.com/api/1/oauth/access_token")
request = Net::HTTP::Post.new uri
request.set_form_data({ :x_auth_username => 'hamchapman@gmail.com', :x_auth_password => 'jubbujbird', :x_auth_mode => "client_auth"})
response = Net::HTTP.start(uri.hostname, uri.port, :use_ssl => true) do |http|
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  http.ssl_version = :SSLv3
  http.request(req)
end




require "net/https"
require "uri"

uri = URI.parse("https://secure.com/")
http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(uri.request_uri)

response = http.request(request)



payload = { :x_auth_username => 'hamchapman@gmail.com', :x_auth_password => 'jubbujbird', :x_auth_mode => "client_auth"}.to_json
uri = URI('https://www.instapaper.com/api/1/oauth/access_token')
req = Net::HTTP::Post.new uri
req.body = payload

response = Net::HTTP.start(uri.hostname, uri.port, :use_ssl => true) do |http|
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  http.ssl_version = :SSLv3
  http.request(req)
end
